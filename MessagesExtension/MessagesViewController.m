//
//  MessagesViewController.m
//  MessagesExtension
//
//  Created by ZhengWei on 16/6/22.
//  Copyright © 2016年 Bourbon. All rights reserved.
//

#import "MessagesViewController.h"

#import "StickerBrowserController.h"
@interface MessagesViewController ()

@end

@implementation MessagesViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    return;
    for (int i = 0; i < 4; i++) {
        UIButton *button = [UIButton buttonWithType:(UIButtonTypeContactAdd)];
        [button setTag:i];
        [button setFrame:CGRectMake(100 + i * 60, 50, 20, 20)];
        [button addTarget:self action:@selector(buttonAction:) forControlEvents:(UIControlEventTouchUpInside)];
        [self.view addSubview:button];
    }
    [self addObserver:self forKeyPath:@"activeConversation" options:(NSKeyValueObservingOptionNew) context:nil];

}
-(void)dealloc
{
    [self removeObserver:self forKeyPath:@"activeConversation"];
}
-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary<NSKeyValueChangeKey,id> *)change context:(void *)context
{
    NSLog(@"接收到相应");
}
-(void)buttonAction:(UIButton *)button
{
    if (button.tag == 0) {
        [self.activeConversation insertText:@"发送内容" completionHandler:^(NSError * _Nullable error) {
            
        }];
    }else if (button.tag == 1){
        NSURL *fileURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"1" ofType:@"png"]];
        MSSticker *sticker = [[MSSticker alloc] initWithContentsOfFileURL:fileURL localizedDescription:@"wenben " error:nil];
        [self.activeConversation insertSticker:sticker completionHandler:^(NSError * _Nullable error) {
            
        }];
    }else if (button.tag ==2){
        MSMessage *message = [[MSMessage alloc] init];
        message.URL = [NSURL URLWithString:@"http://img4.imgtn.bdimg.com/it/u=16705507,1328875785&fm=21&gp=0.jpg"];

        MSMessageTemplateLayout *layout = [[MSMessageTemplateLayout alloc] init];
        layout.imageTitle = @"title";
        layout.imageSubtitle = @"subtitle";
        layout.caption = @"caption";
        layout.subcaption =  @"subcaption";
        layout.trailingCaption = @"trailingCaption";
        layout.trailingSubcaption = @"trailingSubcaption";
        layout.mediaFileURL = [NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"1" ofType:@"png"]];
        message.layout = layout;
        [self.activeConversation insertMessage:message localizedChangeDescription:@"消息" completionHandler:^(NSError * _Nullable error) {
            
        }];
    
    }else if (button.tag == 3){
    
        [self.activeConversation insertAttachment:[NSURL fileURLWithPath:[[NSBundle mainBundle] pathForResource:@"2" ofType:@"mp3"]] withAlternateFilename:@"aaaa" completionHandler:^(NSError * _Nullable error) {
            
        }];
    }
}
- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Conversation Handling

-(void)didBecomeActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the inactive to active state.
    // This will happen when the extension is about to present UI.
    
    // Use this method to configure the extension and restore previously stored state.

}

-(void)willResignActiveWithConversation:(MSConversation *)conversation {
    // Called when the extension is about to move from the active to inactive state.
    // This will happen when the user dissmises the extension, changes to a different
    // conversation or quits Messages.
    
    // Use this method to release shared resources, save user data, invalidate timers,
    // and store enough state information to restore your extension to its current state
    // in case it is terminated later.
}

-(void)didReceiveMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when a message arrives that was generated by another instance of this
    // extension on a remote device.
    
    // Use this method to trigger UI updates in response to the message.
}

-(void)didStartSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user taps the send button.
}

-(void)didCancelSendingMessage:(MSMessage *)message conversation:(MSConversation *)conversation {
    // Called when the user deletes the message without sending it.
    
    // Use this to clean up state related to the deleted message.
}

-(void)willTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called before the extension transitions to a new presentation style.
    
    // Use this method to prepare for the change in presentation style.
}

-(void)didTransitionToPresentationStyle:(MSMessagesAppPresentationStyle)presentationStyle {
    // Called after the extension transitions to a new presentation style.
    
    // Use this method to finalize any behaviors associated with the change in presentation style.
}

-(void)didSelectMessage:(MSMessage *)message conversation:(MSConversation *)conversation
{

}

@end
